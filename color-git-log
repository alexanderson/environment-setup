#!/usr/bin/env python2

# Adapted from the ruby version stolen from garybernhardt (https://github.com/garybernhardt)

import fileinput
import re


ANSI_BLACK = "\033[0;30m"
ANSI_BLACK_BOLD = "\033[0;30;1m"
ANSI_RED = "\033[0;31m"
ANSI_RED_BOLD = "\033[0;31;1m"
ANSI_GREEN = "\033[0;32m"
ANSI_GREEN_BOLD = "\033[0;32;1m"
ANSI_YELLOW = "\033[0;33m"
ANSI_YELLOW_BOLD = "\033[0;33;1m"
ANSI_BLUE = "\033[0;34m"
ANSI_BLUE_BOLD = "\033[0;34;1m"
ANSI_MAGENTA = "\033[0;35m"
ANSI_MAGENTA_BOLD = "\033[0;35;1m"
ANSI_CYAN = "\033[0;36m"
ANSI_CYAN_BOLD = "\033[0;36;1m"
ANSI_WHITE = "\033[0;37m"
ANSI_WHITE_BOLD = "\033[0;37;1m"
ANSI_RESET = "\033[0m"


# Example of the git log format we're colorizing:
#
# * bec1093    (4 months)   <Gary Bernhardt>              add gn script example for running on a file
# *   08c5419  (4 months)   <Gary Bernhardt>              Merge branch 'pretty-branch-list'
# |\
# | * 107d71a  (4 months)   <Leyan Lo>                    Add branch hash, and style more true to pretty git log.
# | * 2f9ea37  (4 months)   <Leyan Lo>                    Add pretty_git_branch and pretty_git_branch_sorted
# |/
# * db85c40    (4 months)   <Gary Bernhardt>              symlink ~/bin/vi to /usr/local/bin/vim


def colorize_input():
    for line in fileinput.input():
        print(colorize_line(line))


def colorize_line(line):
    line_pattern = (
        r'\A'                          # Beginning of string (not just end of line)
        r'(?P<graph>[*\\\|\/ ]+\s*)'         # Graph drawing characters
        r'(?:'                         # Sometimes there are only graph drawing characters,
        # so the rest is optional.
        r'(?P<commit_hash>[0-9a-f]+\s*)'      # Commit hash
        r'(?P<time>\([^\)]+\)\s*)'     # Relative time of commit
        r'(?P<name>\<[^\>]+\>\s*)'        # Committer name
        r'(?P<refs>\([^\)]+\)\s*)?'    # Refs, e.g. (origin/master, origin/HEAD)
        r'(?P<message>.*)'             # Commit message
        # r'\Z'                          # End of string (not just end of line)
        r')?'                          # End of large optional block
    )
    match = re.match(line_pattern, line)
    graph, commit_hash, time, name, refs, message = match.groups()

    is_merge = message and message.startswith('Merge ')

    if commit_hash:
        colored_line = ''.join((
            ANSI_RESET, graph,
            ANSI_YELLOW, commit_hash,
            ANSI_GREEN, time,
            ANSI_BLUE, name,
            ANSI_RED_BOLD, refs,

            # Turn merge commits red so they stand out
            ANSI_RED if is_merge else ANSI_RESET,
            message,

            ANSI_RESET,
            '\n'
        ))
    else:
        colored_line = ''.join((
            ANSI_RESET,
            graph,
            '\n'
        ))
    return colored_line


if __name__ == '__main__':
    colorize_input()
